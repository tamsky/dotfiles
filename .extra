# -*- shell-script -*-

# This file expects to only load in an interactive shell

#############################
# tamsky personal additions #
#############################

##############
## FUNCTIONS #
##############

function dotfiles() {
    cd ~/src/github/dotfiles
}

function mykey() {
    cat ~/.ssh/id_dsa.pub
}

function addmykeyto() {
    mykey | ssh $@ 'cat >> ~/.ssh/authorized_keys'
}

# http://stackoverflow.com/a/3951175
function is_num() {
  local string=$1
  case ${string} in
      ''|*[!0-9]*) return 1 ;;
      *) return 0 ;;
  esac
}

function clean() {
  echo -n "Really clean this directory?";
  read yorn;
  if test "$yorn" = "y"; then
      rm -f \#* *~ .*~ *.bak .*.bak *.tmp .*.tmp core a.out;
      echo "Cleaned.";
  else
      echo "Not cleaned.";
  fi
}

# User interface goodies.
function xtitle () {
 echo -n -e "\033]2;$*\007"
}
function xseticon () {
 echo -n -e "\033]1;$1\007"
}
function user_xtitle () {
  if [ "$TERM" = "xterm" ]; then
     xtitle $(whoami)@$HOST
     xseticon $(whoami)@$HOST
  fi
}
function ssh () {
    command ssh "$@";
    user_xtitle
}

# rename our default color-enabled 'diff' command to 'cdiff'
if [[ $(type -t diff) == "function" ]] ; then
    # note leading 'c':
    eval "c$(declare -f diff)"
    # and restore the original file command:
    unset diff
fi

# `e` with no arguments opens the current directory in emacsclient, otherwise opens the
# given location
function e() {
    if [[ $# -eq 0 ]]; then
        emacs .;
    else
        emacs "$@";
    fi;
}

function killmux() {
   ( cd ~/.ansible/cp/ ;
      for i in * ; do
                   i=${i##ansible-ssh-}
          local USER=${i##*-}
          local REST=${i%%-$USER}
          local PORT=${REST##*-}
                REST=${REST%%-$PORT}
          local REMOTE=${REST}
          echo -n ${USER}@${REMOTE}:${PORT}
          command ssh -l ${USER}  -o "ControlPath ${PWD}/ansible-ssh-${REMOTE}-${PORT}-${USER}" ${REMOTE} -p ${PORT} -O exit
      done
   )
   ( cd ~/.ssh/connections/ ;
      for i in * ; do
        local PORT=${i##*_}
        local USER=${i%%_*}
        local UR=${i%%_$PORT}
        local REMOTE=${UR##$USER$'_'}
        echo -n ${USER}@${REMOTE}:${PORT}
        command ssh ${USER}@${REMOTE} -p ${PORT} -O exit
      done
   );
}

###################
## SHELL OPTIONS ##
###################

# Old variables vs new hotness: http://www.opensource.apple.com/source/bash/bash-30/bash/COMPAT

# Interactive comments?  I don't *think* so!
set +o interactive-comments

# If the variable command_oriented_history is set, multiple lines
# which form one command will be saved as one history entry.
# was: command_oriented_history=1
shopt -s cmdhist

# Set auto_resume if you want to resume on "emacs", as well as on
# "%emacs".
auto_resume=on

# Set notify if you want to be asynchronously notified about
# background job completion.
# was: notify=
set -o notify

# Make it so that failed `exec' commands don't flush this shell.
# was: no_exit_on_failed_exec=
shopt -s execfail

#######################
## TERMINAL SETTINGS ##
#######################
# typical OSX fixups:
stty erase '' \
     eol2 undef  \
     discard undef \
     dsusp undef \
     status undef

#############
## HISTORY ##
#############

# DEPRECATED Share bash history across terms.
# DEPRECATED http://unix.stackexchange.com/a/18443
# HISTCONTROL=ignoredups:erasedups

# retain all history so shell.log is more useful
HISTCONTROL=
shopt -s histappend
# DEPRECATED PROMPT_COMMAND="history -n; history -w; history -c; history -r; ${PROMPT_COMMAND}"
# DEPRECATED End bash history sharing.

# Make more commands not show up in history
# after trial, rejected ignore terms:
#  * --help
HISTIGNORE="ls:cd:cd -:pwd:exit:date:history:shutdown:reboot:telinit:init:exit:afk";


#############
## EXPORTS ##
#############

# Don't let LESS ever use the alternate screen
export LESS=-X
export PAGER="less -X"
export MANPAGER="less -X"

# This is a RedHat-ism.  Avoid their systemwide export.
export INPUTRC=

# We used to do a lot more work here trying to join $(hostname) with $(domainname)
# But this works almost all the time:
export FQDNHOSTNAME=$(uname -n)

export I_WANT_A_BROKEN_PS=true


# history_logger() side effects:
#   sets global variable '_last_history_number_logged'
#     $HISTCMD special variable should actually provide this,
#     But it appears unavailable in functions or at PROMPT_COMMAND eval time.
#
function history_logger() {
  local last_exit_code=$?   # must be the first command we run in this function
  local last_history_line=$(history 1)
  local _match_me="^ *([0-9]+)"
  # Only log if we are not root:
  if [ "$(id -u)" -ne 0 ]; then
    # only log if history number changes:
    if [[ ${last_history_line} =~ ${_match_me} ]] && [[ ${BASH_REMATCH[1]} != $_last_history_number_logged ]] ; then
      _last_history_number_logged=${BASH_REMATCH[1]} ;
      echo "$(date)] ${HOSTNAME%%.*}[$$:S${WINDOW}:${last_exit_code}] ${PWD/~/\~} ${last_history_line}" >> ~/.shell.log;
    fi ;
  fi
}

# the plumbing that makes it work:
export PROMPT_COMMAND='history_logger'


#############
## ALIASES ##
#############

# aliases for all machines
alias nw='emacs -nw '
alias em='emacs '
function ec () { screen -X select 0 ; emacsclient "$@" ; screen -X select $WINDOW; }
function ec () { emacsclient -c "$@" ; }
alias ns='nslookup '
alias purge='/bin/rm -f *~ .*~ #*'
alias po='popd'
alias pu='pushd'
alias over='cd .. ; cd \!*'

alias j='jobs -l '
alias l='ls -ltr '
alias ls='ls -F '
alias lal='ls -alF '
alias ll='ls -lF '
alias dir='ll '
alias la='ls -aF '

alias rm='rm -i '
alias cp='cp -i '
alias mv='mv -i '

alias less='less -X '
alias m='less -X'

alias unhist='export HISTFILE='
alias nohist='export HISTFILE='

alias openports='lsof -Pnl +M -i4'

# LINUX hard console specific
alias restoreconsole="consolechars -f /usr/lib/kbd/consolefonts/lat0-sun16.psf.gz"

### OSX specific ALIASES
# show/hide dot files
alias sf="defaults write com.apple.Finder AppleShowAllFiles true; killall Finder"
alias hf="defaults write com.apple.Finder AppleShowAllFiles false; killall Finder"

alias sc='screen '

###############
## SSH-AGENT ##
###############

# our old SSH gnuscreen helper, we shouldn't need it anymore:
alias forward="/bin/rm ~/.ssh-agent && touch ~/.ssh-agent && chmod 700 ~/.ssh-agent && echo export \$(env | grep -e ^SSH_AUTH_SOCK -e ^SSH_AGENT_PID) > ~/.ssh-agent"
alias agent="source ~/.ssh-agent"

# If it's not already our canonical file, and it's a SOCKET... 
# set a symlink to it at the canonical location.
[[ "${SSH_AUTH_SOCK}" != $HOME/.ssh/agent-$USER-screen ]] && \
    [[ -S ${SSH_AUTH_SOCK} ]] && \
        ln -sf ${SSH_AUTH_SOCK} $HOME/.ssh/agent-$USER-screen

# Set a canonical location.
export SSH_AUTH_SOCK_ORIG=${SSH_AUTH_SOCK}
export SSH_AUTH_SOCK="$HOME/.ssh/agent-$USER-screen"


#####################
## BASH COMPLETION ##
#####################

# Enable tab completion for `h` by marking it as an alias for `hg`
if type _hg &> /dev/null && [ -f /usr/local/etc/bash_completion.d/hg-completion.bash ]; then
    complete -o default -o nospace -F _hg h;
fi;

[[ $(type -p brew) ]] &&
if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

####################
## PER-HOST FILES ##
####################

# ALIASES
if [[ -f "$HOME/.${FQDNHOSTNAME}/bash_aliases" ]] ; then
    . "$HOME/.${FQDNHOSTNAME}/bash_aliases"
fi

## BASH_PROFILE
if [[ -f "$HOME/.${FQDNHOSTNAME}/bash_profile" ]] ; then
    . "$HOME/.${FQDNHOSTNAME}/bash_profile"
fi



# BREW additons
# source $(brew --prefix nvm)/nvm.sh
# # BREW installed 'brew cask install google-cloud-sdk'
# source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc'
# source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc'
# # BREW awscli
complete -C aws_completer aws


# Things not in public VC:
source ~/.extra_secrets

# because we run after exports, we need to cleanup PATH again here:
# Cleanup
export PATH=$( printf "$PATH" | tr : '\n' | dedup_input | tr '\n' : )
