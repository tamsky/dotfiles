# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

# args: $1 = non empty string denotes "debug on"
prompt_git() {
	local s='';
	local shelved='';
	local branchName='';
	local hgstat_modified='';
	local hgstat_added='';
	local hgstat_removed='';
	local hgstat_missing=''; #deleted by non-hg command, but tracked
	local hgstat_untracked='';

	[[ $DEBUG ]] && set -x;
	# It's possible 'hg id' gives everything we want in one shot, need to explore that.
	branchName="$(hg id -B 2>/dev/null)"
	if [ -n "${branchName}" ] ; then
	  s=$(hg status 2>/dev/null | awk 'BEGIN {modified=added=removed=untracked=missing=0;}
				/^M/  {modified+=1;}
				/^A/  {added+=1;}
				/^R/  {removed+=1;}
				/^!/  {missing+=1;}
				/^\?/ {untracked+=1;}
				END { 
				      if (modified > 0)  { printf("M") };
				      if (added > 0)	 { printf("A") };
				      if (removed > 0)   { printf("R") };
				      if (missing > 0)   { printf("!") };
				      if (untracked > 0) { printf("?") };
				    }' )

	[ -n "${s}" ] && s=" [${s}]";

	IFS=$'\n' shelved=( $(hg shelve --list ) )
	[ ${#shelved[@]} -gt 0 ] && shelved=" [ shelf: ${#shelved[@]} ]" || shelved='';

	echo -e "${1}${branchName}${blue}${s}${yellow}${shelved}";

        # local project=$(basename $(hg root))
        # local entity=$(basename $PWD)
        # entity=${entity// } # space
        # entity=${entity//	} # tab
        # [[ -z "${entity}" ]] && return # $entity is empty or only whitespace
        # type wakatime 2>&1 >/dev/null &&
        #   (nohup wakatime --write --plugin "bash-wakaprime/0.1" --entity-type app --project "$project" --entity "$entity" 2>&1 > /dev/null)
	[[ $DEBUG ]] && set +x;
	return;
	

	# Check if the current directory is in a Git repository.
	elif [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}


if tput setaf 1 &> /dev/null; then
    # if we always reset the terminal anyway, why reset it here?
    #	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);

        # If within an emacs *shell*, use term entries we know it understands:
        if [[ "${INSIDE_EMACS}" ]] ; then
	   echo "setting colors for *emacs*";
	   reset="${black}";
	   reset="\e[0m";
        fi
        
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Unless emacs, set the terminal title to the current working directory.
if [[ -z ${INSIDE_EMACS} ]] ; then
  PS1="\[\033]0;\w\007\]";
else
  PS1="";
fi
PS1+="\[${bold}\]\n"; # newline
PS1+=": \[${userStyle}\]\u"; # username
PS1+="\[${black}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${black}\] in ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${black} on ${violet}\")"; # Git repository details
PS1+=";\n";
PS1+="\[${black}\]# \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

[[ $DEBUG ]] && set +x;
